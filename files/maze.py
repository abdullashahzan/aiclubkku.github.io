# -*- coding: utf-8 -*-
"""maze.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wDFljc8UIXIy7zmWVnqxjrC4YBoKn4nv

# **Libraries**
"""

import random

"""# **Global variables**"""

maze = [
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,2,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0],
    [0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,3,0,0],
    [0,0,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0],
    [0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,0,0],
    [0,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,0,0],
    [0,0,1,1,1,1,1,0,1,0,0,1,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
]

destination = False

"""# **Codes to show the maze graphically**"""

import numpy as np
import matplotlib.pyplot as plt

array = np.array(maze)

plt.imshow(array)
plt.colorbar()
plt.show()

"""# **Main function that finds the solution to the maze**"""

def frontier():
  #First we need to get the position of our frontier, so we will call a function whose job is to get position of anything we ask
  position = get_position(2) # in this case 2 is our frontier
  
  # Now we check if didn't get the error code while finding position
  if position != 10:
    while destination == False: # Meaning run the loop till we reach the end of our maze

      # First we will look around frontier and gather the options availabe to him for that we will use another function which gathers options
      # find_options will take the input as the row and column of our frontier
      changing_position = get_position(2)
      options_available = find_options(changing_position[0], changing_position[1])
      
      # Now there are 2 outcome number 1 we find any option and number 2 we dont find any options
      if len(options_available) != 0:
        # Now we will make a random choice by selecting a random direction 
        choice = random.choice(options_available)
        
        # Now we walk in the direction of choice we made by using another function
        # The following function would want 2 variables, no1 the position of frontier and no2 the choice he has made
        current_position = get_position(2)
        walk(current_position, choice)
        new_position = get_position(2)
        end = check(new_position[0], new_position[1])
        if end == True:
          print("Destination Reached")
          break
      
      elif len(options_available) == 0:
        # If we have no options left then we will first check if we have reached the destination or not and then restart the maze
        current_position = get_position(2)
        end = check(current_position[0], current_position[1])
        if end == True:
          maze[position[0]][position[1]] = 2
        else:
          print("Destination reached!")
          break

      else:
        print("Encountered error while looking for options")


  # If we got an error we will print the following output
  else:
    print("Couldn't find the object")

  return

frontier()

"""# **Function that reads position of our frontier**"""

def get_position(n):
  # We need to get in which row and column the object is...
  row, col = 0, 0

  # We loop through each and every column of the row
  for rows in maze:
    for column in rows:

      # If we find our object we return its value
      if column == n:
        return [row, col]

      # If the object is not in that column then we add 1 to it
      else:
        col += 1
    
    # We add 1 to row when we go to next row and make column 0 because each row has new columns
    row += 1
    col = 0

    # 10 is an error code meaning we didn't find the object
  return 10

"""# **Function that find the available options**"""

def find_options(row, col):
  # This function will return a list of options available
  options = []

  # There are maximum of only 4 ways for our frontier to travel i.e. East, West, North, South
  if maze[row - 1][col] == 1:
    options.append("East")
  if maze[row + 1][col] == 1:
    options.append("West")
  if maze[row][col - 1] == 1:
    options.append("North")
  if maze[row][col + 1] == 1:
    options.append("South")

  return options

"""# **Function that checks if we reached our destination or not**"""

def check(row, col):
  global destination
  destination = False

  if maze[row - 1][col] == 3:
    destination = True
  if maze[row + 1][col] == 3:
    destination = True
  if maze[row][col - 1] == 3:
    destination = True
  if maze[row][col + 1] == 3:
    destination = True
  
  return destination

"""# **Function responsible for moving our frontier**"""

# pos is row and col of frontier
def walk(pos, choice):
  row, col = pos[0], pos[1]
  # First we mark the steps of frontier and then move him and along with each step we see if we have reached our destination or not
  maze[row][col] = 4

  if choice == "East":
    maze[row - 1][col] = 2
  if choice == "West":
    maze[row + 1][col] = 2
  if choice == "North":
    maze[row][col - 1] = 2
  if choice == "South":
    maze[row][col + 1] = 2
    
  return